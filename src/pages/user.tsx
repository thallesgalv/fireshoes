import type { NextPage } from 'next'
import Head from 'next/head'
import { FormEvent, useState, useEffect, useCallback } from 'react'
import Button from '../components/Button'
import Heading from '../components/Heading'
import { MdLogout, MdNoAccounts } from 'react-icons/md'
import { useAuthContext } from '../contexts/AuthContext'
import Input from '../components/Input'
import CrudCard from '../components/CrudCard'
import UserOption from '../components/UserOption'
import Modal, { ModalStatus } from '../components/Modal'
import { useGlobalContext } from '../contexts/GlobalContext'
import { Adress, useUserContext, PaymentMethod } from '../contexts/UserContext'
import { MdLockOutline } from 'react-icons/md'
import useFetch from '../hooks/useFetch'
import { BuildingSvg, OrdersSvg, PaymentMethodSvg } from '../components/Svgs'
import { useRouter } from 'next/router'

const User: NextPage = () => {
  const { logout } = useAuthContext()
  const { isMobile } = useGlobalContext()
  const {
    currentUser,
    setAdress,
    getUser,
    setActiveAdress,
    deleteAdress,
    adressDataForm,
    setAdressDataForm,
    paymentMethodDataForm,
    setPaymentMethodDataForm,
    setActivePaymentMethod,
    deletePaymentMethod,
    setPaymentMethod,
    updateAdress,
    updatePaymentMethod
  } = useUserContext()
  const { request, data } = useFetch()
  const [radio, setRadio] = useState('entrega')
  const [editMode, setEditMode] = useState(false)
  const [modalStatus, setModalStatus] = useState<ModalStatus>(null)

  const router = useRouter()

  useEffect(() => {
    if (!currentUser?.uid) router.push('/login')
  }, [])

  useEffect(() => {
    getUser()
  }, [])

  useEffect(() => {
    if (adressDataForm?.postalCode?.length === 9) {
      let postalCode = adressDataForm?.postalCode.replace(/\D/g, '')
      request(`https://viacep.com.br/ws/${postalCode}/json/`)
    }
  }, [adressDataForm?.postalCode])

  useEffect(() => {
    setAdressDataForm({
      ...adressDataForm,
      street: data?.logradouro,
      neighborhood: data?.bairro,
      city: data?.localidade,
      state: data?.uf
    })
  }, [data])

  const handleAdress = useCallback(
    (e: FormEvent<HTMLInputElement>) => {
      setAdressDataForm({
        ...adressDataForm,
        [e.currentTarget.name]: e.currentTarget.value
      })
    },
    [adressDataForm]
  )

  const handleEditAdress = (arg: number) => {
    setEditMode(true)
    if (currentUser?.adressList)
      setAdressDataForm(currentUser?.adressList?.[arg])

    setModalStatus('createAdressModal')
  }

  const handleUpdateAdress = () => {
    if (currentUser?.selectedAdress || currentUser?.selectedAdress === 0) {
      updateAdress(currentUser.selectedAdress)
    }
    setModalStatus(null)
  }

  const handlePaymentMethod = useCallback(
    (e: FormEvent<HTMLInputElement>) => {
      setPaymentMethodDataForm({
        ...paymentMethodDataForm,
        [e.currentTarget.name]: e.currentTarget.value
      })
    },
    [paymentMethodDataForm]
  )

  const handleEditPaymentMethod = (arg: number) => {
    setEditMode(true)
    if (currentUser?.paymentMethodList)
      setPaymentMethodDataForm(currentUser?.paymentMethodList?.[arg])

    setModalStatus('createPaymentMethodModal')
  }

  const handleUpdatePaymentMethod = () => {
    if (
      currentUser?.selectedPaymentMethod ||
      currentUser?.selectedPaymentMethod === 0
    ) {
      updatePaymentMethod(currentUser.selectedPaymentMethod)
    }
    setModalStatus(null)
  }

  return currentUser?.uid ? (
    <>
      <Head>
        <title>Fireshoes üî• | √Årea do Usu√°rio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Heading text="√Årea do Usu√°rio" center />
      <section
        className="
          w-11/12 m-auto
          lg:w-full lg:flex
        "
      >
        <aside className="flex flex-col gap-6">
          <UserOption
            radio={radio}
            setRadio={setRadio}
            text="Endere√ßo de entrega"
            value="entrega"
          />
          <UserOption
            radio={radio}
            setRadio={setRadio}
            text="Meios de pagamento"
            value="pagamento"
          />
          <UserOption
            radio={radio}
            setRadio={setRadio}
            text="Compras realizadas"
            value="compras"
          />
          <div>
            <Button
              primary
              text="Fazer logout"
              icon={<MdLogout />}
              onClick={logout}
            />
          </div>
          <div>
            <Button
              secondary
              text="Deletar conta"
              icon={<MdNoAccounts />}
              onClick={logout}
            />
          </div>
        </aside>
        <article
          className="lg:absolute left-0 right-0 mt-6 m-auto "
          style={{ width: 'calc(min(91.666667%,25rem))' }}
        >
          <div>
            {radio === 'entrega' && (
              <ul className="flex flex-col gap-6">
                {currentUser?.adressList?.length ? (
                  currentUser?.adressList?.map(
                    (
                      {
                        street,
                        number,
                        complement,
                        neighborhood,
                        city,
                        state,
                        postalCode
                      },
                      idx
                    ) => {
                      return (
                        <CrudCard
                          key={idx}
                          isActive={idx === currentUser.selectedAdress}
                          onClick={() => setActiveAdress(idx)}
                          handleDeleteButton={() => deleteAdress(idx)}
                          handleUpdateButton={() => handleEditAdress(idx)}
                        >
                          <p>
                            {street}, {number}, {complement}
                          </p>
                          <p>{neighborhood}</p>
                          <p>
                            {city}/{state}
                          </p>
                          <p>{postalCode}</p>
                        </CrudCard>
                      )
                    }
                  )
                ) : (
                  <div className="flex justify-center items-center flex-col gap-4">
                    <BuildingSvg />
                    <p className="text-primary text-center">
                      Nenhum endere√ßo cadastrado.
                    </p>
                  </div>
                )}
                <div
                  className={`flex ${
                    currentUser?.adressList?.length
                      ? 'flex-row-reverse'
                      : 'justify-center'
                  }`}
                >
                  <Button
                    primary
                    text="Cadastrar novo"
                    onClick={() => {
                      setEditMode(false)
                      setAdressDataForm({} as Adress)
                      setModalStatus('createAdressModal')
                    }}
                  />
                </div>
              </ul>
            )}
          </div>
          <div>
            {radio === 'pagamento' && (
              <ul className="flex flex-col gap-6">
                {currentUser?.paymentMethodList?.length ? (
                  currentUser?.paymentMethodList?.map(
                    ({ alias, cardNumber }, idx) => {
                      return (
                        <CrudCard
                          key={idx}
                          isActive={idx === currentUser.selectedPaymentMethod}
                          onClick={() => setActivePaymentMethod(idx)}
                          handleDeleteButton={() => deletePaymentMethod(idx)}
                          handleUpdateButton={() =>
                            handleEditPaymentMethod(idx)
                          }
                        >
                          <p>{alias}</p>
                          <p>‚Ä¢‚Ä¢‚Ä¢‚Ä¢{cardNumber?.slice(-4)}</p>
                        </CrudCard>
                      )
                    }
                  )
                ) : (
                  <div className="flex justify-center items-center flex-col gap-4">
                    <PaymentMethodSvg />
                    <p className="text-primary text-center">
                      Nenhum meio de pagamento cadastrado.
                    </p>
                  </div>
                )}
                <div
                  className={`flex ${
                    currentUser?.paymentMethodList?.length
                      ? 'flex-row-reverse'
                      : 'justify-center'
                  }`}
                >
                  <Button
                    primary
                    text="Cadastrar novo"
                    onClick={() => {
                      setEditMode(false)
                      setPaymentMethodDataForm({} as PaymentMethod)
                      setModalStatus('createPaymentMethodModal')
                    }}
                  />
                </div>
              </ul>
            )}
          </div>

          <div>
            {radio === 'compras' && (
              <div className="flex justify-center items-center flex-col gap-4">
                <OrdersSvg />
                <p className="text-primary text-center">
                  Hist√≥rico de compras vazio.
                </p>
              </div>
            )}
          </div>
        </article>
      </section>
      {modalStatus === 'createAdressModal' && (
        <Modal modalStatus={modalStatus} setModalStatus={setModalStatus}>
          <div
            onSubmit={(e) => e.preventDefault()}
            className="m-auto flex flex-col gap-6"
            style={{ width: 'calc(min(91.666667%, 20rem))' }}
          >
            <Heading
              text={editMode ? 'Editar endere√ßo' : 'Novo endere√ßo'}
              small
              center
            />
            <Input
              text="CEP:"
              maxLength={9}
              name="postalCode"
              htmlFor="adressPostalCode"
              required
              widthFull
              placeholder="00000-000"
              onChange={handleAdress}
              mask="postalCodeMask"
              value={adressDataForm?.postalCode}
            />
            <Input
              text="Logradouro:"
              name="street"
              htmlFor="adressStreet"
              required
              widthFull
              onChange={handleAdress}
              value={adressDataForm?.street}
            />

            <div
              className="grid gap-6"
              style={{
                gridTemplateColumns: isMobile ? '1fr 1fr' : '2fr 2fr 8fr'
              }}
            >
              <Input
                text="N√∫mero:"
                name="number"
                htmlFor="adressNumber"
                required
                widthFull
                onChange={handleAdress}
                value={adressDataForm?.number}
              />
              <Input
                text="Complemento:"
                name="complement"
                htmlFor="adressComplement"
                widthFull
                onChange={handleAdress}
                value={adressDataForm?.complement}
              />
              <div className="col-span-2 lg:col-auto flex items-center">
                <Input
                  text="Bairro:"
                  name="neighborhood"
                  htmlFor="adressNeighborhood"
                  required
                  widthFull
                  onChange={handleAdress}
                  value={adressDataForm?.neighborhood}
                />
              </div>
            </div>
            <div
              className="grid gap-6"
              style={{ gridTemplateColumns: '10fr 2fr' }}
            >
              <Input
                text="Cidade:"
                name="city"
                htmlFor="adressCity"
                required
                widthFull
                onChange={handleAdress}
                value={adressDataForm?.city}
              />
              <Input
                text="UF:"
                maxLength={2}
                name="state"
                htmlFor="adressState"
                required
                widthFull
                onChange={handleAdress}
                value={adressDataForm?.state}
              />
            </div>
            <div className="flex justify-center flex-wrap gap-4 flex-1">
              {editMode ? (
                <Button
                  primary
                  text="Editar"
                  widthFull={isMobile}
                  onClick={handleUpdateAdress}
                />
              ) : (
                <Button
                  primary
                  text="Cadastrar"
                  widthFull={isMobile}
                  onClick={() => {
                    setAdress()
                    setModalStatus(null)
                  }}
                />
              )}
            </div>
          </div>
        </Modal>
      )}
      {modalStatus === 'createPaymentMethodModal' && (
        <Modal modalStatus={modalStatus} setModalStatus={setModalStatus}>
          <form
            onSubmit={(e) => e.preventDefault()}
            className="m-auto flex flex-col gap-6"
            style={{ width: 'calc(min(91.666667%, 20rem))' }}
          >
            <Heading
              text={editMode ? 'Editar cart√£o' : 'Novo cart√£o'}
              small
              center
            />

            <Input
              text="Apelido do cart√£o:"
              name="alias"
              htmlFor="paymentMethodAlias"
              required
              widthFull
              placeholder="Banco X"
              onChange={handlePaymentMethod}
            />
            <Input
              text="N√∫mero do cart√£o:"
              name="cardNumber"
              htmlFor="paymentMethodCardNumber"
              required
              widthFull
              icon={<MdLockOutline />}
              onChange={handlePaymentMethod}
            />
            <div
              className="grid gap-6"
              style={{ gridTemplateColumns: '6fr 6fr' }}
            >
              <Input
                text="Validade:"
                maxLength={5}
                name="expirationDate"
                htmlFor="paymentMethodExpirationDate"
                required
                widthFull
                placeholder="00/00"
                onChange={handlePaymentMethod}
              />
              <Input
                text="CVV:"
                maxLength={3}
                name="securityCode"
                htmlFor="paymentMethodSecurityCode"
                required
                widthFull
                icon={<MdLockOutline />}
                onChange={handlePaymentMethod}
              />
            </div>

            <div className="flex justify-center flex-wrap gap-4 flex-1">
              {editMode ? (
                <Button
                  primary
                  text="Editar"
                  widthFull={isMobile}
                  onClick={handleUpdatePaymentMethod}
                />
              ) : (
                <Button
                  primary
                  text="Cadastrar"
                  widthFull={isMobile}
                  onClick={() => {
                    setPaymentMethod()
                    setModalStatus(null)
                  }}
                />
              )}
            </div>
          </form>
        </Modal>
      )}
    </>
  ) : null
}

export default User
