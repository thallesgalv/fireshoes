import Head from 'next/head'
import { NextPage } from 'next/types'
import Main from '../../components/Main'
import CategoryPage from '../../components/views/Category/CategoryPage'
import { FilterContextProvider } from '../../contexts/FilterContext'
import {
  getProductsByQuery,
  getProductsByServer
} from '../../firebase/firebaseRequests'
import { Product } from '../../types/interfaces'

interface CategoryProps {
  products: Product[]
}

const Category: NextPage<CategoryProps> = ({ products }) => {
  const [firstProduct] = products
  const { category } = firstProduct || ''

  return (
    <Main>
      <Head>
        <title>{category} | Fireshoes ðŸ”¥</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <FilterContextProvider>
        <CategoryPage category={category} products={products} />
      </FilterContextProvider>
    </Main>
  )
}

export default Category

interface PathProps {
  params: { slug: string }
}

export const getStaticProps = async (props: PathProps) => {
  const slug = props.params.slug
  const capitalize = slug.charAt(0).toUpperCase() + slug.slice(1)
  return {
    props: {
      products: await getProductsByQuery('where', 'category', capitalize)
    },
    revalidate: 60 * 1 // 1 minute
  }
}

export const getStaticPaths = async () => {
  const allProducts = await getProductsByServer()

  const uniques = new Set(
    allProducts?.map((product: Product) => product.category)
  )

  const paths = Array.from(uniques)?.map((category) => ({
    params: { slug: category }
  }))

  return {
    paths,
    fallback: 'blocking'
  }
}
